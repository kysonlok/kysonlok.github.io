{"pages":[{"title":"About Me","text":"My name is Kyson Lok. I am a software engineer. I’m keen to learn, experience and share. My interests include, but are not limited to: Deep Learning Computer Vision Neural Network Internet of Thing(IoT) Computer Security and Cryptography and more… The aim of this web page is to organize and share my works from research, lectures, and projects. Anyone is welcome to use and contribute to materials exhibited in this page.","link":"/about/index.html"},{"title":"tags","text":"","link":"/tags/index.html"},{"title":"categories","text":"","link":"/categories/index.html"}],"posts":[{"title":"Gitee搭建个人图床","text":"写在前面利用 PicGo 工具把本地图片上传到 Gitee，来实现个人图床。选择 Gitee 的原因是因为在国内访问 Gitee 较快，访问 GitHub 是蜗牛的速度。PicGo 默认不支持 Gitee 作为图床，要安装 gitee-uploader 插件。 安装 下载并安装 PicGo； 下载并安装 node.js； 打开 PicGo，在【插件设置】搜索并安装 gitee-uploader插件。 配置图床在 PicGo 的【图床设置】- 【gitee】设置图床的配置，配置之前要在 Gitee 上新建一个用于存放图床的仓库，配置如下： repo：Gitee 上的仓库链接 branch：仓库的分支 token：Gitee 的私人令牌，点击头像 -【设置】-【私人令牌】，再点击生成新令牌，验证密码之后会生成一个 token，把 token 复制到配置中 注意，令牌只会明文显示一次，建议在配置插件的时候再来生成令牌，直接复制进去，忘记了要重新生成。 path：可选项，指定图片上传到 Gitee 仓库的哪个目录 customPath 和 customUrl：提交的 message，保持默认就好 点击设为默认图床完成配置，回到上传区就可以使用了。 配置 PicGoPicGo 默认不对上传图片进行修改，我一般不关心图片的命名，因此设置 PicGo 在上传之前使用时间戳重命名图片。 点击 PicGo设置 ，开启 上传前重命名 和 时间戳重命名。","link":"/2020/06/07/Gitee%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/"},{"title":"Hexo-Icarus-支持Latex数学公式","text":"支持 MathJaxIcarus 主题默认支持了 MathJax 插件渲染数学公式，只需要在主题配置文件 theme/icarus/_config.yml 使能就可以直接使用。 关于更多说明，可以参考 icarus-user-guide-other-plugins-MathJax。 要注意的地方是，如果使用了多个配置文件，如默认配置使用 theme/icarus/_config.yml，文章页面配置使用 theme/icarus/_config.yml，则需要在文章页面配置 theme/icarus/_config.yml 里面使能 MathJax。 语法渲染错误由于 Latex 和 Markdown 有些语法会冲突，如下划线 _，在 Markdown 被渲染成斜体。有两种解决办法： 使用转义字符 \\： 123$$\\hat{x}_{k}=\\hat{x}_{k}^{-}+K_{t}\\left(y_{k}\\right)$$ 使用 HTML 标签，内联表达式用 &lt;span&gt;&lt;/span&gt;，块表达式用 &lt;div&gt;&lt;/div&gt;： 12345&lt;div&gt;$$\\hat{x}_{k}=\\hat{x}_{k}^{-}+K_{t}\\left(y_{k}\\right)$$&lt;/div&gt; 预览效果1234567891011121314151617This is inline expression: $ax^2+bx+c&gt;0$.This is a block expression:$$\\displaystyle \\frac{1}{\\Bigl(\\sqrt{\\phi \\sqrt{5}}-\\phi\\Bigr) e^{\\frac25 \\pi}} = 1+\\frac{e^{-2\\pi}} {1+\\frac{e^{-4\\pi}} {1+\\frac{e^{-6\\pi}} {1+\\frac{e^{-8\\pi}} {1+\\cdots} } } }$$Or use $LaTeX$ environment: &lt;div&gt;\\begin{equation}A =\\begin{bmatrix} a &amp; b \\\\ c &amp; c\\end{bmatrix}\\end{equation}&lt;/div&gt; This is another inline expression: $ax^2+bx+c&gt;0$. This is a block expression: $$\\displaystyle \\frac{1}{\\Bigl(\\sqrt{\\phi \\sqrt{5}}-\\phi\\Bigr) e^{\\frac25 \\pi}} =1+\\frac{e^{-2\\pi}} {1+\\frac{e^{-4\\pi}} {1+\\frac{e^{-6\\pi}}{1+\\frac{e^{-8\\pi}} {1+\\cdots} } } }$$ use $LaTeX$ environment: \\begin{equation} A = \\begin{bmatrix} a & b \\\\ c & c \\end{bmatrix} \\end{equation}","link":"/2020/06/11/Hexo-Icarus-%E6%94%AF%E6%8C%81Latex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/"},{"title":"Hexo NextT 主题设置","text":"安装和开始按照 Hexo 官方文档的指导安装 Hexo，并且使用 hexo init 创建一个博客站点。 切换到博客根目录，下载 NextT 主题： 1git clone https://github.com/theme-next/hexo-theme-next themes/next 版本说明hexo 版本: 4.2.0next 版本: 7.8.0 注意时效性，版本不同配置项可能存在差异。 NextT 主题配置基础配置使用 NextT 主题，并且设置语言为中文，修改博客根目录下的 _config.yml 文件： 12language: zh-CN theme: next 接着修改主题风格，在 theme 配置 themes/next/_config.yml 文件找到 scheme 字段，选择主题风格。目前支持四种：Muse, Mist, Pisces 和 Gemini，任意选择一种合适的，我这里用的是 Mist 方案。 设置菜单在 theme 配置 themes/next/_config.yml 文件找到 menu 字段，可以根据个人偏好设置菜单。我这里保留了分类 categories，标签 tags，归档 archives 和 关于 about，|| 后面表示图标，这里不作修改。 123456789menu: home: / || fa fa-home categories: /categories/ || fa fa-th tags: /tags/ || fa fa-tags archives: /archives/ || fa fa-archive about: /about/ || fa fa-user #schedule: /schedule/ || fa fa-calendar #sitemap: /sitemap.xml || fa fa-sitemap #commonweal: /404/ || fa fa-heartbeat 创建页面设置完菜单，由于新增的菜单栏没有对应的页面，点击会提示找不到页面，执行以下命令为新增的菜单栏添加对应的页面： 123hexo new page tagshexo new page categorieshexo new page about 成功执行以上命令，在 sources 目录下会生成对应的文件夹，每个文件夹里包含一个 index.md 文件。 文章显示默认首页的文章会显示全文，可以在原文插入 &lt;!-- more --&gt; 标签，会自动把该标签前面的文本生成摘要显示。 123Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.&lt;!-- more --&gt;Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. 显示头像和 favicon在 theme 配置 themes/next/_config.yml 文件找到 avatar 字段，设置 url 为头像文件(头像放置的路径为 themes/next/source/images) 。我比较喜欢头像呈圆形，这里把 rounded 的值改为了 true。 12345678avatar: # Replace the default image and set the url here. # url: #/images/avatar.gif url: /images/avatar.png # If true, the avatar will be dispalyed in circle. rounded: true # If true, the avatar will be rotated with the cursor. rotated: false 可以使用 favicon-generator 网站制作 favicon，制作完之后下载，把制作好的 favicon 放置到 themes/next/source/images 目录下，在 theme 配置 themes/next/_config.yml 文件找到 favicon 字段，把相应的文件名改成上传的新 favicon 文件名。 1234567favicon: small: /images/favicon-16x16.png medium: /images/favicon-32x32.png apple_touch_icon: /images/apple-touch-icon.png safari_pinned_tab: /images/logo.svg #android_manifest: /images/manifest.json #ms_browserconfig: /images/browserconfig.xml 搜索功能在 theme 配置 themes/next/_config.yml 文件找到 local_search 字段，把值改为 true。并且在博客根目录下的_config.yml 文件添加以下内容： 12345search: path: search.xml field: post format: html limit: 10000 注意，搜索功能依赖 https://github.com/theme-next/hexo-generator-searchdb，在博客根目录执行 npm install hexo-generator-searchdb --save 进行安装。 加载进度条在 theme 配置 themes/next/_config.yml 文件找到 pace 字段，把值改为 true，根据个人偏好选择任意一种提供的样式填入 pace_theme。 注意，进度条依赖 https://github.com/theme-next/theme-next-pace，按照 theme-next-pace 的 README 说明进行安装。 Fork me on GitHub在 github-corners 或者 github-ribbons 选择自己喜欢的样式，复制插入到 themes/next/layout/_layout.swig 文件中 &lt;div class=&quot;headband&quot;&gt;&lt;/div&gt; 位置后面。 12&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;&lt;a href=&quot;https://github.com/kysonlok&quot;&gt;......","link":"/2020/06/03/Hexo-NextT-%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE/"},{"title":"Hexo Icarus 主题设置","text":"安装和开始按照 Hexo 官方文档的指导安装 Hexo，并且使用 hexo init 创建一个博客站点。 切换到博客根目录，下载 NextT 主题并安装依赖模块： 12git clone https://github.com/ppoffice/hexo-theme-icarus.git themes/icarusnpm install bulma-stylus@0.8.0 hexo-component-inferno hexo-renderer-inferno inferno inferno-create-element --save 版本说明Hexo 版本: 4.2.0Icarus 版本: 3.1.0 注意时效性，版本不同配置项可能存在差异。 Icarus 主题配置基础配置使用 Icarus 主题，并且设置语言为中文，修改博客根目录下的 _config.yml 文件： 12language: zh-CN theme: icarus Icarus 为我们预置了多达 12 种语言，默认是英文。zh-CN 是简体中文，大家可以根据自己的文案风格修改 theme/icarus/languages/zh-CN.yml 文件。 主题配置首次在博客根目录执行 hexo clean 或者 hexo g 都会触发 Icarus 自动生成一个 theme/icarus/_config.yml 文件。 logo 设置logo 会展示在顶部导航栏的最左侧以及底部的 footer 区域，大家可以替换 source/images/ 下的 logo 文件，使用 svg 或者 png 格式的都可以。 评论系统Icarus 预置了 Changyan, Disqus, Facebook, Gitment, Gitalk, Isso, LiveRe 和 Valine 八大主流评论插件。 这里以我使用的 Valine 为例。首先在 LeanCloud 注册一个免费的开发账号，新建一个新应用，并把 appid 和 appkey 配置在对应部分： 123456789101112131415161718comment: type: valine app_id: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx app_key: xxxxxxxxxxxxxxxxxxxxxx placeholder: &quot;&quot; # 可选填 avatar: mm # 可选填 avatar_force: false # 可选填 meta: [&quot;nick&quot;, &quot;mail&quot;, &quot;link&quot;] # 可选填 page_size: 10 # 可选填 lang: zh-CN # 可选填 visitor: false # 可选填 highlight: true # 可选填 record_ip: false # 可选填 server_urls: # 可选填 emoji_cdn: # 可选填 emoji_maps: # 可选填 enable_qq: false # 可选填 required_fields: [] # 可选填 其他的评论插件配置，具体可以参见用户评论插件。 如果有的文章不希望别人评论，但是我们又不希望把整个站点的评论关闭的话，可以对指定文章进行评论关闭操作。操作也很简单，只需要在文章 markdown 文件的 front-matter 区域设置 comments 为 false 即可： 1234---title: article titlecomments: false--- 打赏功能Icarus 提供了支付宝，微信，PayPal 和 Patreon 四种支付方式： 12345678910111213141516171819202122232425262728donates: # Alipay donate button configurations - type: alipay # Alipay qrcode image URL qrcode: /img/alipay.jpg # &quot;Buy me a coffee&quot; donate button configurations # - # type: buymeacoffee # URL to the &quot;Buy me a coffee&quot; page # url: '' # Patreon donate button configurations # - # type: patreon # URL to the Patreon page # url: '' # Paypal donate button configurations # - # type: paypal # Paypal business ID or email address # business: '' # Currency code # currency_code: USD # Wechat donate button configurations - type: wechat # Wechat qrcode image URL qrcode: /img/wechat.jpg 支付宝和微信只需要提供二维码就可以了，可以使用本地静态资源或者图床链接。 widget 挂件挂件是 Icarus 比较精髓的部分，所有的 widget 都是一个卡片，可以自由摆放在任何位置。包括文章在内，个人资料、链接、分类、最新文章、归档、标签都是一个卡片，可以在 theme/icarus/_config.yml 中设置各个卡片的具体属性，同时也可以设置卡片出现在网站的左侧还是右侧。 除了在 themes/icarus/_config.yml 的默认主题配置文件外，Icarus 也会从themes/icarus/_config.post.yml 和 themes/icarus/_config.page.yml 获取替代配置。可以在_config.post.yml 中设置仅对所有文章生效的配置， 例如，在此配置文件中把所有的挂件放置在页面一侧来实现所有文章两栏布局，同时其他页面仍保持三栏布局。详细使用可以参见 icarus用户指南-主题配置-配置文件与优先级。 一般文章是 post layout，about/categories/tags 这些是 page layout。 为了页面简洁大方，主页删除了大部分不需要的挂件，左侧只保留个人资料，右侧保留标签、分类和归档。文章页面只保留目录。 themes/icarus/_config.yml 挂件配置： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051widgets: # Profile widget configurations - # Where should the widget be placed, left sidebar or right sidebar position: left type: profile # Author name author: Kyson Lok # Author title author_title: Developer # Author's current location location: ShenZhen, China # URL or path to the avatar image avatar: /img/avatar.png # Whether show the rounded avatar image avatar_rounded: true # Email address for the Gravatar gravatar: # URL or path for the follow button follow_link: 'https://github.com/kysonlok' # Links to be shown on the bottom of the profile widget social_links: Github: icon: fab fa-github url: 'https://github.com/kysonlok' Facebook: icon: fab fa-facebook url: 'https://facebook.com' Twitter: icon: fab fa-twitter url: 'https://twitter.com' Dribbble: icon: fab fa-dribbble url: 'https://dribbble.com' # RSS: # icon: fas fa-rss # url: / - # Where should the widget be placed, left sidebar or right sidebar position: right type: tags # Categories widget configurations - # Where should the widget be placed, left sidebar or right sidebar position: right type: categories # Archives widget configurations - # Where should the widget be placed, left sidebar or right sidebar position: right type: archives themes/icarus/_config.post.yml 挂件配置： 12345widgets: - # Where should the widget be placed, left sidebar or right sidebar position: right type: toc themes/icarus/_config.page.yml 配置跟 themes/icarus/_config.post.yml 保持一致。","link":"/2020/06/05/Hexo-Icarus-%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE/"},{"title":"费斯妥密码","text":"Feistel 概述Feistel（费斯妥）密码结构，在密码学研究中，Feistel 密码结构是用于分组密码中的一种对称结构，它本身并不是分组密码算法的具体方案，而是一种设计模型。 很多对称分组加密算法都是基于 Feistel 分组密码结构的，其中包括 DES。Feistel 结构是由许多相同的轮函数组成，每轮使用不同的子密钥，每轮包含了代替和置换两个步骤。 构造细节令 F 为轮函数；令 $K_1, K_2, …, K_n$ 分别为第 1, 2, …, n 轮的子密钥。 加密明文过程 将明文块拆分为两个等长的块：($L_0, R_0$)； 在每一轮中，右半部分 $R_i$ 保持不变，作为左半部分下一轮 $L_{i+1}$ 的输入；而左半部分 $L_i$ 经过一个依赖右半部分 $R_i$ 和 子密钥 $K_i$ 的运算，作为右半部分下一轮 $R_{i+1}$ 的输入。 运算的规则为，我们使用一个加密函数 F，它接受两个输入——密钥 K 和 R，该函数的输出为 F(R, K)，然后将左半部分 $L_i$ 和加密函数结果进行异或计算，得到的结果为 $R_{i+1}$。 $$ L_{i+1} = R_i\\\\ R_{i+1} = L_i{\\oplus}F(R_i, K_i) $$ 依次进行 n 轮计算，当最后一轮完成后，两个子块 $R_{n+1}$ 和 $L_{n+1}$ 按顺序连接起来，形成密文块($R_{n+1}, L_{n+1}$)。 解密密文过程 对于密文($R_{n+1}, L_{n+1}$)，通过计算 i = n, n-1, ……, 0，对密文进行加密的逆向操作； 在每一轮中，进行如下运算（i 为当前轮数） $$ R_i = L_{i+1}\\\\ L_i = R_{i+1}{\\oplus}F(L_{i+1}, K_i) $$ 依次进行 n 轮计算，结果($R_0, L_0$)就是明文。 置换与代替置换步骤是指修改过的 L 和未修改过的 R 进行了交换。$L_i$ 经过运算变成了 $R_{i+1}$，$R_i$ 变成了 $L_{i+1}$。 代替步骤是指每个明文元素或元素组被唯一地替换为相应的密文元素或元素组。 影响因素影响Feistel 结构的因素有如下 5 个： 块的大小：大的块会提高加密的安全性，但是会降低加密、解密的速度。截止至2013年，比较流行的这种方案是 64 bit。而 128 bit 的使用也比较广泛。 密钥的大小：同上。现在流行的是 64 bit ，而 128 bit 正逐渐成为主流。 迭代轮数：Feistel 密码的轮数量取决于系统所需的安全性，轮数越多系统越安全。但更多的轮数意味着加密和解密过程增多，效率越低。现阶段比较流行的是 16 轮。 子密钥的生成算法：生成算法越复杂，则会使得密码被破译的难度增强，即，信息会越安全。 轮函数的复杂度：轮函数越复杂，则安全性越高。","link":"/2020/06/10/%E8%B4%B9%E6%96%AF%E5%A6%A5%E5%AF%86%E7%A0%81/"}],"tags":[{"name":"Gitee","slug":"Gitee","link":"/tags/Gitee/"},{"name":"图床","slug":"图床","link":"/tags/%E5%9B%BE%E5%BA%8A/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"密码学","slug":"密码学","link":"/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"},{"name":"Latex","slug":"Latex","link":"/tags/Latex/"}],"categories":[{"name":"垃圾桶","slug":"垃圾桶","link":"/categories/%E5%9E%83%E5%9C%BE%E6%A1%B6/"},{"name":"密码学与安全","slug":"密码学与安全","link":"/categories/%E5%AF%86%E7%A0%81%E5%AD%A6%E4%B8%8E%E5%AE%89%E5%85%A8/"}]}